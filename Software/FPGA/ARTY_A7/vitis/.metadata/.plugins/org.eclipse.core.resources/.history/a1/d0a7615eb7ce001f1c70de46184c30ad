#include "xuartlite.h"
#include "xuartlite_l.h"
#include "xintc.h"
#include "xil_exception.h"
#include "sleep.h"
#include "xgpio.h"

#include "SCPI_Def.h"
#include "ADS8681.h"

// Definitions
#define UART_DEVICE_ID      XPAR_UARTLITE_0_DEVICE_ID
#define INTC_DEVICE_ID      XPAR_INTC_0_DEVICE_ID
#define UART_INTERRUPT_ID   XPAR_INTC_0_UARTLITE_0_VEC_ID

#define GPIO_DEVICE_ID		XPAR_GPIO_0_DEVICE_ID

#define  RX_BUFFER_SIZE	SCPI_INPUT_BUFFER_LENGTH

static s8 RxBuffer[RX_BUFFER_SIZE];
static u16 RxBufferIndex = 0;
static volatile u8 ReceivedData;
static const char* ends[3] = {LINE_ENDING_CR, LINE_ENDING_LF, LINE_ENDING_CRLF};

// Instances
XUartLite UartLiteInstance;
XIntc UartIntcInstance;
XGpio Gpio;


int InitializeUartLite() {
    int Status;

    Status = XUartLite_Initialize(&UartLiteInstance, UART_DEVICE_ID);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    XUartLite_EnableInterrupt(&UartLiteInstance);

    return XST_SUCCESS;
}


int InitializeInterruptSystem() {
    int Status;

    Status = XIntc_Initialize(&IntcInstance, INTC_DEVICE_ID);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }


    Status = XIntc_Connect(&IntcInstance, UART_INTERRUPT_ID,
                           (XInterruptHandler)XUartLite_InterruptHandler,
                           (void *)&UartLiteInstance);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }


    Status = XIntc_Start(&IntcInstance, XIN_REAL_MODE);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    XIntc_Enable(&UartIntcInstance, UART_INTERRUPT_ID);

    return XST_SUCCESS;
}



// static const char* ends[2] = {LINE_ENDING_CR, LINE_ENDING_LF};

void RxUartHandler(void *CallBackRef, unsigned int EventData) {

	u8 uartRx_byte;

	  XUartLite_Recv(&UartLiteInstance, &uartRx_byte, 1);

	  RxBuffer[RxBufferIndex] = uartRx_byte;
	  RxBufferIndex++;

	  if ( '\r' == uartRx_byte) {

		  memcpy(&scpi_uart_context.end[0],ends[2],strlen(ends[2]));

		  while (XUartLite_IsSending(&UartLiteInstance) == TRUE);

		  XUartLite_ResetFifos(&UartLiteInstance);

		  ReceivedData = 1;

	  } else if ( '\n' == uartRx_byte)   {

		  memcpy(&scpi_uart_context.end[1],ends[0],strlen(ends[1]));

		  while (XUartLite_IsSending(&UartLiteInstance) == TRUE);

		  XUartLite_ResetFifos(&UartLiteInstance);

		  ReceivedData = 1;
	  }

}


void SetupCustomInterruptHandler() {
    XUartLite_SetRecvHandler(&UartLiteInstance, RxUartHandler, &UartLiteInstance);
}

void EnableInterrupts() {

	Xil_ExceptionInit();


    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
                                 (Xil_ExceptionHandler)XIntc_InterruptHandler,
                                 &IntcInstance);

    Xil_ExceptionEnable();
}


int main() {
    s32 Status;
    ReceivedData = 0;
    Status = InitializeUartLite();
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    Status = InitializeInterruptSystem();
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }
    SetupCustomInterruptHandler();

    Status = ADS8681_Init();
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    Status = XGpio_Initialize(&Gpio, GPIO_DEVICE_ID);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    EnableInterrupts();


    SCPI_Init(&scpi_uart_context,
            scpi_commands,
            &scpi_uart_interface,
            scpi_units_def,
            SCPI_IDN1, SCPI_IDN2, SCPI_IDN3, SCPI_IDN4,
            scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
            scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE);


    xil_printf("System Initialized. Waiting for Data...\r\n");

    while (1) {

    	if(ReceivedData)
    	{
    		XGpio_DiscreteWrite(&Gpio,1,0x01);
    		SCPI_Input(&scpi_uart_context, RxBuffer, strlen(RxBuffer));

    		// Clear UART input data
    		memset(RxBuffer,0,RX_BUFFER_SIZE);
    		ReceivedData = 0;
    		RxBufferIndex = 0;
    		XGpio_DiscreteClear(&Gpio,1,0x01);
    	}

    	usleep(200);


    }

    // Never get here
    return XST_SUCCESS;
}
